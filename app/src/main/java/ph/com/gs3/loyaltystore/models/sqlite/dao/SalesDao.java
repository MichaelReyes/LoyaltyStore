package ph.com.gs3.loyaltystore.models.sqlite.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ph.com.gs3.loyaltystore.models.sqlite.dao.Sales;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SALES".
*/
public class SalesDao extends AbstractDao<Sales, Long> {

    public static final String TABLENAME = "SALES";

    /**
     * Properties of entity Sales.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Store_id = new Property(1, Long.class, "store_id", false, "STORE_ID");
        public final static Property Customer_id = new Property(2, Long.class, "customer_id", false, "CUSTOMER_ID");
        public final static Property Amount = new Property(3, Float.class, "amount", false, "AMOUNT");
        public final static Property Total_discount = new Property(4, Float.class, "total_discount", false, "TOTAL_DISCOUNT");
        public final static Property Is_synced = new Property(5, Boolean.class, "is_synced", false, "IS_SYNCED");
        public final static Property Transaction_date = new Property(6, java.util.Date.class, "transaction_date", false, "TRANSACTION_DATE");
    };


    public SalesDao(DaoConfig config) {
        super(config);
    }
    
    public SalesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SALES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STORE_ID\" INTEGER," + // 1: store_id
                "\"CUSTOMER_ID\" INTEGER," + // 2: customer_id
                "\"AMOUNT\" REAL," + // 3: amount
                "\"TOTAL_DISCOUNT\" REAL," + // 4: total_discount
                "\"IS_SYNCED\" INTEGER," + // 5: is_synced
                "\"TRANSACTION_DATE\" INTEGER);"); // 6: transaction_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SALES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Sales entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long store_id = entity.getStore_id();
        if (store_id != null) {
            stmt.bindLong(2, store_id);
        }
 
        Long customer_id = entity.getCustomer_id();
        if (customer_id != null) {
            stmt.bindLong(3, customer_id);
        }
 
        Float amount = entity.getAmount();
        if (amount != null) {
            stmt.bindDouble(4, amount);
        }
 
        Float total_discount = entity.getTotal_discount();
        if (total_discount != null) {
            stmt.bindDouble(5, total_discount);
        }
 
        Boolean is_synced = entity.getIs_synced();
        if (is_synced != null) {
            stmt.bindLong(6, is_synced ? 1L: 0L);
        }
 
        java.util.Date transaction_date = entity.getTransaction_date();
        if (transaction_date != null) {
            stmt.bindLong(7, transaction_date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Sales readEntity(Cursor cursor, int offset) {
        Sales entity = new Sales( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // store_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // customer_id
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // amount
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // total_discount
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // is_synced
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // transaction_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Sales entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStore_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCustomer_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setAmount(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setTotal_discount(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setIs_synced(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setTransaction_date(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Sales entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Sales entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
