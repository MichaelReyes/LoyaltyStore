package ph.com.gs3.loyaltystore.models.sqlite.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ph.com.gs3.loyaltystore.models.sqlite.dao.Customer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CUSTOMER".
*/
public class CustomerDao extends AbstractDao<Customer, Long> {

    public static final String TABLENAME = "CUSTOMER";

    /**
     * Properties of entity Customer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Device_id = new Property(2, String.class, "device_id", false, "DEVICE_ID");
        public final static Property Contact_number = new Property(3, String.class, "contact_number", false, "CONTACT_NUMBER");
        public final static Property Location = new Property(4, String.class, "location", false, "LOCATION");
        public final static Property Gender = new Property(5, String.class, "gender", false, "GENDER");
        public final static Property Birth_date = new Property(6, java.util.Date.class, "birth_date", false, "BIRTH_DATE");
        public final static Property Points = new Property(7, Integer.class, "points", false, "POINTS");
        public final static Property Created_at = new Property(8, java.util.Date.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(9, java.util.Date.class, "updated_at", false, "UPDATED_AT");
    };


    public CustomerDao(DaoConfig config) {
        super(config);
    }
    
    public CustomerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CUSTOMER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"DEVICE_ID\" TEXT," + // 2: device_id
                "\"CONTACT_NUMBER\" TEXT," + // 3: contact_number
                "\"LOCATION\" TEXT," + // 4: location
                "\"GENDER\" TEXT," + // 5: gender
                "\"BIRTH_DATE\" INTEGER," + // 6: birth_date
                "\"POINTS\" INTEGER," + // 7: points
                "\"CREATED_AT\" INTEGER," + // 8: created_at
                "\"UPDATED_AT\" INTEGER);"); // 9: updated_at
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOMER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Customer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindString(3, device_id);
        }
 
        String contact_number = entity.getContact_number();
        if (contact_number != null) {
            stmt.bindString(4, contact_number);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(5, location);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(6, gender);
        }
 
        java.util.Date birth_date = entity.getBirth_date();
        if (birth_date != null) {
            stmt.bindLong(7, birth_date.getTime());
        }
 
        Integer points = entity.getPoints();
        if (points != null) {
            stmt.bindLong(8, points);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(9, created_at.getTime());
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(10, updated_at.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Customer readEntity(Cursor cursor, int offset) {
        Customer entity = new Customer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // device_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // contact_number
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // location
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gender
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // birth_date
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // points
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // created_at
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)) // updated_at
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Customer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDevice_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContact_number(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLocation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBirth_date(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setPoints(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setCreated_at(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setUpdated_at(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Customer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Customer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
