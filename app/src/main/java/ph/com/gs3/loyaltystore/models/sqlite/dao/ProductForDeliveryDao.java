package ph.com.gs3.loyaltystore.models.sqlite.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ph.com.gs3.loyaltystore.models.sqlite.dao.ProductForDelivery;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT_FOR_DELIVERY".
*/
public class ProductForDeliveryDao extends AbstractDao<ProductForDelivery, Long> {

    public static final String TABLENAME = "PRODUCT_FOR_DELIVERY";

    /**
     * Properties of entity ProductForDelivery.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Product_id = new Property(1, Long.class, "product_id", false, "PRODUCT_ID");
        public final static Property Track_no = new Property(2, String.class, "track_no", false, "TRACK_NO");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Quantity = new Property(4, Double.class, "quantity", false, "QUANTITY");
        public final static Property Pick_bom = new Property(5, String.class, "pick_bom", false, "PICK_BOM");
        public final static Property Status = new Property(6, String.class, "status", false, "STATUS");
        public final static Property Cash = new Property(7, Double.class, "cash", false, "CASH");
        public final static Property Distribution_type = new Property(8, String.class, "distribution_type", false, "DISTRIBUTION_TYPE");
        public final static Property Date_created = new Property(9, java.util.Date.class, "date_created", false, "DATE_CREATED");
        public final static Property Quantity_received = new Property(10, Double.class, "quantity_received", false, "QUANTITY_RECEIVED");
        public final static Property Date_received = new Property(11, java.util.Date.class, "date_received", false, "DATE_RECEIVED");
        public final static Property Branch_id = new Property(12, Long.class, "branch_id", false, "BRANCH_ID");
        public final static Property Branch = new Property(13, String.class, "branch", false, "BRANCH");
    };


    public ProductForDeliveryDao(DaoConfig config) {
        super(config);
    }
    
    public ProductForDeliveryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT_FOR_DELIVERY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PRODUCT_ID\" INTEGER," + // 1: product_id
                "\"TRACK_NO\" TEXT," + // 2: track_no
                "\"NAME\" TEXT," + // 3: name
                "\"QUANTITY\" REAL," + // 4: quantity
                "\"PICK_BOM\" TEXT," + // 5: pick_bom
                "\"STATUS\" TEXT," + // 6: status
                "\"CASH\" REAL," + // 7: cash
                "\"DISTRIBUTION_TYPE\" TEXT," + // 8: distribution_type
                "\"DATE_CREATED\" INTEGER," + // 9: date_created
                "\"QUANTITY_RECEIVED\" REAL," + // 10: quantity_received
                "\"DATE_RECEIVED\" INTEGER," + // 11: date_received
                "\"BRANCH_ID\" INTEGER," + // 12: branch_id
                "\"BRANCH\" TEXT);"); // 13: branch
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT_FOR_DELIVERY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProductForDelivery entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindLong(2, product_id);
        }
 
        String track_no = entity.getTrack_no();
        if (track_no != null) {
            stmt.bindString(3, track_no);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        Double quantity = entity.getQuantity();
        if (quantity != null) {
            stmt.bindDouble(5, quantity);
        }
 
        String pick_bom = entity.getPick_bom();
        if (pick_bom != null) {
            stmt.bindString(6, pick_bom);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(7, status);
        }
 
        Double cash = entity.getCash();
        if (cash != null) {
            stmt.bindDouble(8, cash);
        }
 
        String distribution_type = entity.getDistribution_type();
        if (distribution_type != null) {
            stmt.bindString(9, distribution_type);
        }
 
        java.util.Date date_created = entity.getDate_created();
        if (date_created != null) {
            stmt.bindLong(10, date_created.getTime());
        }
 
        Double quantity_received = entity.getQuantity_received();
        if (quantity_received != null) {
            stmt.bindDouble(11, quantity_received);
        }
 
        java.util.Date date_received = entity.getDate_received();
        if (date_received != null) {
            stmt.bindLong(12, date_received.getTime());
        }
 
        Long branch_id = entity.getBranch_id();
        if (branch_id != null) {
            stmt.bindLong(13, branch_id);
        }
 
        String branch = entity.getBranch();
        if (branch != null) {
            stmt.bindString(14, branch);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProductForDelivery readEntity(Cursor cursor, int offset) {
        ProductForDelivery entity = new ProductForDelivery( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // product_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // track_no
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // quantity
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pick_bom
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // status
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // cash
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // distribution_type
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // date_created
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // quantity_received
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // date_received
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // branch_id
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // branch
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProductForDelivery entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProduct_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTrack_no(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setQuantity(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setPick_bom(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCash(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setDistribution_type(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDate_created(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setQuantity_received(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setDate_received(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setBranch_id(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setBranch(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ProductForDelivery entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ProductForDelivery entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
