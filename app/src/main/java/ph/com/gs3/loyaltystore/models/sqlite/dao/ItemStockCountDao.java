package ph.com.gs3.loyaltystore.models.sqlite.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ph.com.gs3.loyaltystore.models.sqlite.dao.ItemStockCount;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ITEM_STOCK_COUNT".
*/
public class ItemStockCountDao extends AbstractDao<ItemStockCount, Long> {

    public static final String TABLENAME = "ITEM_STOCK_COUNT";

    /**
     * Properties of entity ItemStockCount.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Store_id = new Property(1, Long.class, "store_id", false, "STORE_ID");
        public final static Property Product_id = new Property(2, Long.class, "product_id", false, "PRODUCT_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property ExpectedQuantity = new Property(4, Double.class, "expectedQuantity", false, "EXPECTED_QUANTITY");
        public final static Property Quantity = new Property(5, Double.class, "quantity", false, "QUANTITY");
        public final static Property Remarks = new Property(6, String.class, "remarks", false, "REMARKS");
        public final static Property Date_counted = new Property(7, java.util.Date.class, "date_counted", false, "DATE_COUNTED");
        public final static Property Is_synced = new Property(8, Boolean.class, "is_synced", false, "IS_SYNCED");
    };


    public ItemStockCountDao(DaoConfig config) {
        super(config);
    }
    
    public ItemStockCountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ITEM_STOCK_COUNT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STORE_ID\" INTEGER," + // 1: store_id
                "\"PRODUCT_ID\" INTEGER," + // 2: product_id
                "\"NAME\" TEXT," + // 3: name
                "\"EXPECTED_QUANTITY\" REAL," + // 4: expectedQuantity
                "\"QUANTITY\" REAL," + // 5: quantity
                "\"REMARKS\" TEXT," + // 6: remarks
                "\"DATE_COUNTED\" INTEGER," + // 7: date_counted
                "\"IS_SYNCED\" INTEGER);"); // 8: is_synced
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ITEM_STOCK_COUNT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ItemStockCount entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long store_id = entity.getStore_id();
        if (store_id != null) {
            stmt.bindLong(2, store_id);
        }
 
        Long product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindLong(3, product_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        Double expectedQuantity = entity.getExpectedQuantity();
        if (expectedQuantity != null) {
            stmt.bindDouble(5, expectedQuantity);
        }
 
        Double quantity = entity.getQuantity();
        if (quantity != null) {
            stmt.bindDouble(6, quantity);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(7, remarks);
        }
 
        java.util.Date date_counted = entity.getDate_counted();
        if (date_counted != null) {
            stmt.bindLong(8, date_counted.getTime());
        }
 
        Boolean is_synced = entity.getIs_synced();
        if (is_synced != null) {
            stmt.bindLong(9, is_synced ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ItemStockCount readEntity(Cursor cursor, int offset) {
        ItemStockCount entity = new ItemStockCount( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // store_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // product_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // expectedQuantity
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // quantity
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // remarks
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // date_counted
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // is_synced
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ItemStockCount entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStore_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setProduct_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExpectedQuantity(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setQuantity(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setRemarks(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDate_counted(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setIs_synced(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ItemStockCount entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ItemStockCount entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
