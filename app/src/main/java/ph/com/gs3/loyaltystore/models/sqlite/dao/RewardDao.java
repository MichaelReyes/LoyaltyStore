package ph.com.gs3.loyaltystore.models.sqlite.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ph.com.gs3.loyaltystore.models.sqlite.dao.Reward;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REWARD".
*/
public class RewardDao extends AbstractDao<Reward, Long> {

    public static final String TABLENAME = "REWARD";

    /**
     * Properties of entity Reward.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Reward_condition = new Property(1, String.class, "reward_condition", false, "REWARD_CONDITION");
        public final static Property Condition_product_id = new Property(2, Integer.class, "condition_product_id", false, "CONDITION_PRODUCT_ID");
        public final static Property Condition = new Property(3, String.class, "condition", false, "CONDITION");
        public final static Property Condition_value = new Property(4, Float.class, "condition_value", false, "CONDITION_VALUE");
        public final static Property Reward_type = new Property(5, String.class, "reward_type", false, "REWARD_TYPE");
        public final static Property Reward = new Property(6, String.class, "reward", false, "REWARD");
        public final static Property Reward_value = new Property(7, String.class, "reward_value", false, "REWARD_VALUE");
        public final static Property Valid_from = new Property(8, java.util.Date.class, "valid_from", false, "VALID_FROM");
        public final static Property Valid_until = new Property(9, java.util.Date.class, "valid_until", false, "VALID_UNTIL");
        public final static Property Created_at = new Property(10, java.util.Date.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(11, java.util.Date.class, "updated_at", false, "UPDATED_AT");
    };


    public RewardDao(DaoConfig config) {
        super(config);
    }
    
    public RewardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REWARD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"REWARD_CONDITION\" TEXT," + // 1: reward_condition
                "\"CONDITION_PRODUCT_ID\" INTEGER," + // 2: condition_product_id
                "\"CONDITION\" TEXT," + // 3: condition
                "\"CONDITION_VALUE\" REAL," + // 4: condition_value
                "\"REWARD_TYPE\" TEXT," + // 5: reward_type
                "\"REWARD\" TEXT," + // 6: reward
                "\"REWARD_VALUE\" TEXT," + // 7: reward_value
                "\"VALID_FROM\" INTEGER," + // 8: valid_from
                "\"VALID_UNTIL\" INTEGER," + // 9: valid_until
                "\"CREATED_AT\" INTEGER," + // 10: created_at
                "\"UPDATED_AT\" INTEGER);"); // 11: updated_at
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REWARD\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Reward entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String reward_condition = entity.getReward_condition();
        if (reward_condition != null) {
            stmt.bindString(2, reward_condition);
        }
 
        Integer condition_product_id = entity.getCondition_product_id();
        if (condition_product_id != null) {
            stmt.bindLong(3, condition_product_id);
        }
 
        String condition = entity.getCondition();
        if (condition != null) {
            stmt.bindString(4, condition);
        }
 
        Float condition_value = entity.getCondition_value();
        if (condition_value != null) {
            stmt.bindDouble(5, condition_value);
        }
 
        String reward_type = entity.getReward_type();
        if (reward_type != null) {
            stmt.bindString(6, reward_type);
        }
 
        String reward = entity.getReward();
        if (reward != null) {
            stmt.bindString(7, reward);
        }
 
        String reward_value = entity.getReward_value();
        if (reward_value != null) {
            stmt.bindString(8, reward_value);
        }
 
        java.util.Date valid_from = entity.getValid_from();
        if (valid_from != null) {
            stmt.bindLong(9, valid_from.getTime());
        }
 
        java.util.Date valid_until = entity.getValid_until();
        if (valid_until != null) {
            stmt.bindLong(10, valid_until.getTime());
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(11, created_at.getTime());
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(12, updated_at.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Reward readEntity(Cursor cursor, int offset) {
        Reward entity = new Reward( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // reward_condition
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // condition_product_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // condition
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // condition_value
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // reward_type
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // reward
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // reward_value
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // valid_from
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // valid_until
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // created_at
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)) // updated_at
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Reward entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setReward_condition(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCondition_product_id(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCondition(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCondition_value(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setReward_type(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReward(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReward_value(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setValid_from(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setValid_until(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setCreated_at(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setUpdated_at(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Reward entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Reward entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
