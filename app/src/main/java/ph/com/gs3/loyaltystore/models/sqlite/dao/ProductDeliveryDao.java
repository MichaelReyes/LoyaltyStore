package ph.com.gs3.loyaltystore.models.sqlite.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ph.com.gs3.loyaltystore.models.sqlite.dao.ProductDelivery;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT_DELIVERY".
*/
public class ProductDeliveryDao extends AbstractDao<ProductDelivery, Long> {

    public static final String TABLENAME = "PRODUCT_DELIVERY";

    /**
     * Properties of entity ProductDelivery.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Distribution_type = new Property(1, String.class, "distribution_type", false, "DISTRIBUTION_TYPE");
        public final static Property Product_id = new Property(2, Long.class, "product_id", false, "PRODUCT_ID");
        public final static Property Cash = new Property(3, Float.class, "cash", false, "CASH");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Delivered_to_store_id = new Property(5, Long.class, "delivered_to_store_id", false, "DELIVERED_TO_STORE_ID");
        public final static Property Delivered_to_store_name = new Property(6, String.class, "delivered_to_store_name", false, "DELIVERED_TO_STORE_NAME");
        public final static Property Delivered_by_agent_id = new Property(7, Integer.class, "delivered_by_agent_id", false, "DELIVERED_BY_AGENT_ID");
        public final static Property Delivered_by_agent_name = new Property(8, String.class, "delivered_by_agent_name", false, "DELIVERED_BY_AGENT_NAME");
        public final static Property Quantity = new Property(9, Double.class, "quantity", false, "QUANTITY");
        public final static Property Date_delivered = new Property(10, java.util.Date.class, "date_delivered", false, "DATE_DELIVERED");
        public final static Property Status = new Property(11, String.class, "status", false, "STATUS");
        public final static Property Is_synced = new Property(12, Boolean.class, "is_synced", false, "IS_SYNCED");
    };


    public ProductDeliveryDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDeliveryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT_DELIVERY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DISTRIBUTION_TYPE\" TEXT," + // 1: distribution_type
                "\"PRODUCT_ID\" INTEGER," + // 2: product_id
                "\"CASH\" REAL," + // 3: cash
                "\"NAME\" TEXT," + // 4: name
                "\"DELIVERED_TO_STORE_ID\" INTEGER," + // 5: delivered_to_store_id
                "\"DELIVERED_TO_STORE_NAME\" TEXT," + // 6: delivered_to_store_name
                "\"DELIVERED_BY_AGENT_ID\" INTEGER," + // 7: delivered_by_agent_id
                "\"DELIVERED_BY_AGENT_NAME\" TEXT," + // 8: delivered_by_agent_name
                "\"QUANTITY\" REAL," + // 9: quantity
                "\"DATE_DELIVERED\" INTEGER," + // 10: date_delivered
                "\"STATUS\" TEXT," + // 11: status
                "\"IS_SYNCED\" INTEGER);"); // 12: is_synced
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT_DELIVERY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProductDelivery entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String distribution_type = entity.getDistribution_type();
        if (distribution_type != null) {
            stmt.bindString(2, distribution_type);
        }
 
        Long product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindLong(3, product_id);
        }
 
        Float cash = entity.getCash();
        if (cash != null) {
            stmt.bindDouble(4, cash);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        Long delivered_to_store_id = entity.getDelivered_to_store_id();
        if (delivered_to_store_id != null) {
            stmt.bindLong(6, delivered_to_store_id);
        }
 
        String delivered_to_store_name = entity.getDelivered_to_store_name();
        if (delivered_to_store_name != null) {
            stmt.bindString(7, delivered_to_store_name);
        }
 
        Integer delivered_by_agent_id = entity.getDelivered_by_agent_id();
        if (delivered_by_agent_id != null) {
            stmt.bindLong(8, delivered_by_agent_id);
        }
 
        String delivered_by_agent_name = entity.getDelivered_by_agent_name();
        if (delivered_by_agent_name != null) {
            stmt.bindString(9, delivered_by_agent_name);
        }
 
        Double quantity = entity.getQuantity();
        if (quantity != null) {
            stmt.bindDouble(10, quantity);
        }
 
        java.util.Date date_delivered = entity.getDate_delivered();
        if (date_delivered != null) {
            stmt.bindLong(11, date_delivered.getTime());
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(12, status);
        }
 
        Boolean is_synced = entity.getIs_synced();
        if (is_synced != null) {
            stmt.bindLong(13, is_synced ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProductDelivery readEntity(Cursor cursor, int offset) {
        ProductDelivery entity = new ProductDelivery( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // distribution_type
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // product_id
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // cash
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // delivered_to_store_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // delivered_to_store_name
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // delivered_by_agent_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // delivered_by_agent_name
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // quantity
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // date_delivered
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // status
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0 // is_synced
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProductDelivery entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDistribution_type(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProduct_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCash(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDelivered_to_store_id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setDelivered_to_store_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDelivered_by_agent_id(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDelivered_by_agent_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setQuantity(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setDate_delivered(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setStatus(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIs_synced(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ProductDelivery entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ProductDelivery entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
